# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_msgs/FindGraspableObjectsAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import moveit_msgs.msg
import sensor_msgs.msg
import grasp_msgs.msg
import genpy
import std_msgs.msg

class FindGraspableObjectsAction(genpy.Message):
  _md5sum = "aa9718df65419abc7523f0a102f5f4fc"
  _type = "grasp_msgs/FindGraspableObjectsAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

FindGraspableObjectsActionGoal action_goal
FindGraspableObjectsActionResult action_result
FindGraspableObjectsActionFeedback action_feedback

================================================================================
MSG: grasp_msgs/FindGraspableObjectsActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
FindGraspableObjectsGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: grasp_msgs/FindGraspableObjectsGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
###########################################################
# This action is called for integrated object detection and
#  grasp planning, such as in base_grasping_perception

# Set to false to disable grasp planning, returning only the objects found
bool plan_grasps
int32 gripper

================================================================================
MSG: grasp_msgs/FindGraspableObjectsActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FindGraspableObjectsResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: grasp_msgs/FindGraspableObjectsResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Graspable objects found
GraspableObject[] objects

# Additional, non-graspable objects which may be support surfaces
Object[] support_surfaces

================================================================================
MSG: grasp_msgs/GraspableObject
###########################################################
# This message describes an object + grasp data
Object object
moveit_msgs/Grasp[] grasps

================================================================================
MSG: grasp_msgs/Object
###########################################################
# This message describes an object.

# Many of the geometric items below lack a stamp/frame_id,
# header stamp/frame_id should be used there
std_msgs/Header header

# An object might have a name
string name

# An object might have a known (named) support surface
string support_surface

# Objects might have properties, such as type/class, or color, etc.
ObjectProperty[] properties

###########################################################
# Objects have many possible descriptions
#  The following are the possible description formats

# Perception modules often represent an object as a cluster of points
#  Is considered valid if number of points > 0
sensor_msgs/PointCloud2 point_cluster

# MoveIt prefers solid primitives or meshes as a description of objects
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# An object representing a support surface might be described by a plane
# Is considered valid if coefficients are not all 0s.
shape_msgs/Plane surface

================================================================================
MSG: grasp_msgs/ObjectProperty
###########################################################
# Other generic properties of an object
string name
string value

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: moveit_msgs/Grasp
# This message contains a description of a grasp that would be used
# with a particular end-effector to grasp an object, including how to
# approach it, grip it, etc.  This message does not contain any
# information about a "grasp point" (a position ON the object).
# Whatever generates this message should have already combined
# information about grasp points with information about the geometry
# of the end-effector to compute the grasp_pose in this message.

# A name for this grasp
string id

# The internal posture of the hand for the pre-grasp
# only positions are used
trajectory_msgs/JointTrajectory pre_grasp_posture

# The internal posture of the hand for the grasp
# positions and efforts are used
trajectory_msgs/JointTrajectory grasp_posture

# The position of the end-effector for the grasp.  This is the pose of
# the "parent_link" of the end-effector, not actually the pose of any
# link *in* the end-effector.  Typically this would be the pose of the
# most distal wrist link before the hand (end-effector) links began.
geometry_msgs/PoseStamped grasp_pose

# The estimated probability of success for this grasp, or some other
# measure of how "good" it is.
float64 grasp_quality

# The approach direction to take before picking an object
GripperTranslation pre_grasp_approach

# The retreat direction to take after a grasp has been completed (object is attached)
GripperTranslation post_grasp_retreat

# The retreat motion to perform when releasing the object; this information
# is not necessary for the grasp itself, but when releasing the object,
# the information will be necessary. The grasp used to perform a pickup
# is returned as part of the result, so this information is available for 
# later use.
GripperTranslation post_place_retreat

# the maximum contact force to use while grasping (<=0 to disable)
float32 max_contact_force

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping
string[] allowed_touch_objects

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: grasp_msgs/FindGraspableObjectsActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FindGraspableObjectsFeedback feedback

================================================================================
MSG: grasp_msgs/FindGraspableObjectsFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Publish objects as they are detected and grasp planned
GraspableObject object

"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['grasp_msgs/FindGraspableObjectsActionGoal','grasp_msgs/FindGraspableObjectsActionResult','grasp_msgs/FindGraspableObjectsActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindGraspableObjectsAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = grasp_msgs.msg.FindGraspableObjectsActionGoal()
      if self.action_result is None:
        self.action_result = grasp_msgs.msg.FindGraspableObjectsActionResult()
      if self.action_feedback is None:
        self.action_feedback = grasp_msgs.msg.FindGraspableObjectsActionFeedback()
    else:
      self.action_goal = grasp_msgs.msg.FindGraspableObjectsActionGoal()
      self.action_result = grasp_msgs.msg.FindGraspableObjectsActionResult()
      self.action_feedback = grasp_msgs.msg.FindGraspableObjectsActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bi3I.pack(_x.action_goal.goal.plan_grasps, _x.action_goal.goal.gripper, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.objects:
        _v1 = val1.object
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v1.properties)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.properties:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.point_cluster
        _v5 = _v4.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v4
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v4.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v4.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v4
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v4.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v4.is_dense))
        length = len(_v1.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.primitive_poses:
          _v7 = val3.position
          _x = _v7
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v8 = val3.orientation
          _x = _v8
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v1.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.mesh_poses:
          _v9 = val3.position
          _x = _v9
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v10 = val3.orientation
          _x = _v10
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v11 = _v1.surface
        buff.write(_struct_4d.pack(*_v11.coef))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _x = val2.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v12 = val2.pre_grasp_posture
          _v13 = _v12.header
          buff.write(_struct_I.pack(_v13.seq))
          _v14 = _v13.stamp
          _x = _v14
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v13.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v12.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v12.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v12.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v12.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.effort))
            _v15 = val4.time_from_start
            _x = _v15
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v16 = val2.grasp_posture
          _v17 = _v16.header
          buff.write(_struct_I.pack(_v17.seq))
          _v18 = _v17.stamp
          _x = _v18
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v17.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v16.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v16.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v16.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v16.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.effort))
            _v19 = val4.time_from_start
            _x = _v19
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v20 = val2.grasp_pose
          _v21 = _v20.header
          buff.write(_struct_I.pack(_v21.seq))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v23 = _v20.pose
          _v24 = _v23.position
          _x = _v24
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v25 = _v23.orientation
          _x = _v25
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.grasp_quality))
          _v26 = val2.pre_grasp_approach
          _v27 = _v26.direction
          _v28 = _v27.header
          buff.write(_struct_I.pack(_v28.seq))
          _v29 = _v28.stamp
          _x = _v29
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v28.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v30 = _v27.vector
          _x = _v30
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v26
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v31 = val2.post_grasp_retreat
          _v32 = _v31.direction
          _v33 = _v32.header
          buff.write(_struct_I.pack(_v33.seq))
          _v34 = _v33.stamp
          _x = _v34
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v33.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v35 = _v32.vector
          _x = _v35
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v31
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v36 = val2.post_place_retreat
          _v37 = _v36.direction
          _v38 = _v37.header
          buff.write(_struct_I.pack(_v38.seq))
          _v39 = _v38.stamp
          _x = _v39
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v38.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v40 = _v37.vector
          _x = _v40
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v36
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          buff.write(_struct_f.pack(val2.max_contact_force))
          length = len(val2.allowed_touch_objects)
          buff.write(_struct_I.pack(length))
          for val3 in val2.allowed_touch_objects:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val3))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val3))
      length = len(self.action_result.result.support_surfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.support_surfaces:
        _v41 = val1.header
        buff.write(_struct_I.pack(_v41.seq))
        _v42 = _v41.stamp
        _x = _v42
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v41.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.properties)
        buff.write(_struct_I.pack(length))
        for val2 in val1.properties:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v43 = val1.point_cluster
        _v44 = _v43.header
        buff.write(_struct_I.pack(_v44.seq))
        _v45 = _v44.stamp
        _x = _v45
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v44.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v43
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v43.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v43.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v43
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v43.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v43.is_dense))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v46 = val2.position
          _x = _v46
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v47 = val2.orientation
          _x = _v47
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_struct_3I.pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v48 = val2.position
          _x = _v48
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v49 = val2.orientation
          _x = _v49
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v50 = val1.surface
        buff.write(_struct_4d.pack(*_v50.coef))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.object.object.header.seq, _x.action_feedback.feedback.object.object.header.stamp.secs, _x.action_feedback.feedback.object.object.header.stamp.nsecs))
      _x = self.action_feedback.feedback.object.object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.object.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.object.object.support_surface
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.object.object.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.properties:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.object.object.point_cluster.header.seq, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.secs, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.nsecs))
      _x = self.action_feedback.feedback.object.object.point_cluster.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.feedback.object.object.point_cluster.height, _x.action_feedback.feedback.object.object.point_cluster.width))
      length = len(self.action_feedback.feedback.object.object.point_cluster.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.point_cluster.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.action_feedback.feedback.object.object.point_cluster.is_bigendian, _x.action_feedback.feedback.object.object.point_cluster.point_step, _x.action_feedback.feedback.object.object.point_cluster.row_step))
      _x = self.action_feedback.feedback.object.object.point_cluster.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.feedback.object.object.point_cluster.is_dense))
      length = len(self.action_feedback.feedback.object.object.primitives)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.primitives:
        buff.write(_struct_B.pack(val1.type))
        length = len(val1.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.dimensions))
      length = len(self.action_feedback.feedback.object.object.primitive_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.primitive_poses:
        _v51 = val1.position
        _x = _v51
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v52 = val1.orientation
        _x = _v52
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.object.object.meshes)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.meshes:
        length = len(val1.triangles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.triangles:
          buff.write(_struct_3I.pack(*val2.vertex_indices))
        length = len(val1.vertices)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vertices:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.object.object.mesh_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.mesh_poses:
        _v53 = val1.position
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v54 = val1.orientation
        _x = _v54
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_4d.pack(*self.action_feedback.feedback.object.object.surface.coef))
      length = len(self.action_feedback.feedback.object.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.grasps:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v55 = val1.pre_grasp_posture
        _v56 = _v55.header
        buff.write(_struct_I.pack(_v56.seq))
        _v57 = _v56.stamp
        _x = _v57
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v56.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v55.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v55.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v55.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v55.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v58 = val3.time_from_start
          _x = _v58
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v59 = val1.grasp_posture
        _v60 = _v59.header
        buff.write(_struct_I.pack(_v60.seq))
        _v61 = _v60.stamp
        _x = _v61
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v60.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v59.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v59.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v59.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v59.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.positions))
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.velocities))
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.accelerations))
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.effort))
          _v62 = val3.time_from_start
          _x = _v62
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v63 = val1.grasp_pose
        _v64 = _v63.header
        buff.write(_struct_I.pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = _v63.pose
        _v67 = _v66.position
        _x = _v67
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v68 = _v66.orientation
        _x = _v68
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.grasp_quality))
        _v69 = val1.pre_grasp_approach
        _v70 = _v69.direction
        _v71 = _v70.header
        buff.write(_struct_I.pack(_v71.seq))
        _v72 = _v71.stamp
        _x = _v72
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v71.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v73 = _v70.vector
        _x = _v73
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v69
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v74 = val1.post_grasp_retreat
        _v75 = _v74.direction
        _v76 = _v75.header
        buff.write(_struct_I.pack(_v76.seq))
        _v77 = _v76.stamp
        _x = _v77
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v76.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v78 = _v75.vector
        _x = _v78
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v74
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v79 = val1.post_place_retreat
        _v80 = _v79.direction
        _v81 = _v80.header
        buff.write(_struct_I.pack(_v81.seq))
        _v82 = _v81.stamp
        _x = _v82
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v81.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v83 = _v80.vector
        _x = _v83
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v79
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        buff.write(_struct_f.pack(val1.max_contact_force))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = grasp_msgs.msg.FindGraspableObjectsActionGoal()
      if self.action_result is None:
        self.action_result = grasp_msgs.msg.FindGraspableObjectsActionResult()
      if self.action_feedback is None:
        self.action_feedback = grasp_msgs.msg.FindGraspableObjectsActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_goal.goal.plan_grasps, _x.action_goal.goal.gripper, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_Bi3I.unpack(str[start:end])
      self.action_goal.goal.plan_grasps = bool(self.action_goal.goal.plan_grasps)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.objects = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.GraspableObject()
        _v84 = val1.object
        _v85 = _v84.header
        start = end
        end += 4
        (_v85.seq,) = _struct_I.unpack(str[start:end])
        _v86 = _v85.stamp
        _x = _v86
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v85.frame_id = str[start:end].decode('utf-8')
        else:
          _v85.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.name = str[start:end].decode('utf-8')
        else:
          _v84.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.support_surface = str[start:end].decode('utf-8')
        else:
          _v84.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.properties = []
        for i in range(0, length):
          val3 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8')
          else:
            val3.value = str[start:end]
          _v84.properties.append(val3)
        _v87 = _v84.point_cluster
        _v88 = _v87.header
        start = end
        end += 4
        (_v88.seq,) = _struct_I.unpack(str[start:end])
        _v89 = _v88.stamp
        _x = _v89
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v88.frame_id = str[start:end].decode('utf-8')
        else:
          _v88.frame_id = str[start:end]
        _x = _v87
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v87.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v87.fields.append(val4)
        _x = _v87
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v87.is_bigendian = bool(_v87.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v87.data = str[start:end]
        start = end
        end += 1
        (_v87.is_dense,) = _struct_B.unpack(str[start:end])
        _v87.is_dense = bool(_v87.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v84.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v90 = val3.position
          _x = _v90
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v91 = val3.orientation
          _x = _v91
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v84.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v84.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v92 = val3.position
          _x = _v92
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v93 = val3.orientation
          _x = _v93
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v84.mesh_poses.append(val3)
        _v94 = _v84.surface
        start = end
        end += 32
        _v94.coef = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.Grasp()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.id = str[start:end].decode('utf-8')
          else:
            val2.id = str[start:end]
          _v95 = val2.pre_grasp_posture
          _v96 = _v95.header
          start = end
          end += 4
          (_v96.seq,) = _struct_I.unpack(str[start:end])
          _v97 = _v96.stamp
          _x = _v97
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v96.frame_id = str[start:end].decode('utf-8')
          else:
            _v96.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v95.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v95.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v95.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = struct.unpack(pattern, str[start:end])
            _v98 = val4.time_from_start
            _x = _v98
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v95.points.append(val4)
          _v99 = val2.grasp_posture
          _v100 = _v99.header
          start = end
          end += 4
          (_v100.seq,) = _struct_I.unpack(str[start:end])
          _v101 = _v100.stamp
          _x = _v101
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v100.frame_id = str[start:end].decode('utf-8')
          else:
            _v100.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v99.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v99.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v99.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = struct.unpack(pattern, str[start:end])
            _v102 = val4.time_from_start
            _x = _v102
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v99.points.append(val4)
          _v103 = val2.grasp_pose
          _v104 = _v103.header
          start = end
          end += 4
          (_v104.seq,) = _struct_I.unpack(str[start:end])
          _v105 = _v104.stamp
          _x = _v105
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v104.frame_id = str[start:end].decode('utf-8')
          else:
            _v104.frame_id = str[start:end]
          _v106 = _v103.pose
          _v107 = _v106.position
          _x = _v107
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v108 = _v106.orientation
          _x = _v108
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 8
          (val2.grasp_quality,) = _struct_d.unpack(str[start:end])
          _v109 = val2.pre_grasp_approach
          _v110 = _v109.direction
          _v111 = _v110.header
          start = end
          end += 4
          (_v111.seq,) = _struct_I.unpack(str[start:end])
          _v112 = _v111.stamp
          _x = _v112
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v111.frame_id = str[start:end].decode('utf-8')
          else:
            _v111.frame_id = str[start:end]
          _v113 = _v110.vector
          _x = _v113
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v109
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v114 = val2.post_grasp_retreat
          _v115 = _v114.direction
          _v116 = _v115.header
          start = end
          end += 4
          (_v116.seq,) = _struct_I.unpack(str[start:end])
          _v117 = _v116.stamp
          _x = _v117
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v116.frame_id = str[start:end].decode('utf-8')
          else:
            _v116.frame_id = str[start:end]
          _v118 = _v115.vector
          _x = _v118
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v114
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v119 = val2.post_place_retreat
          _v120 = _v119.direction
          _v121 = _v120.header
          start = end
          end += 4
          (_v121.seq,) = _struct_I.unpack(str[start:end])
          _v122 = _v121.stamp
          _x = _v122
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v121.frame_id = str[start:end].decode('utf-8')
          else:
            _v121.frame_id = str[start:end]
          _v123 = _v120.vector
          _x = _v123
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v119
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          start = end
          end += 4
          (val2.max_contact_force,) = _struct_f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.allowed_touch_objects = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.allowed_touch_objects.append(val3)
          val1.grasps.append(val2)
        self.action_result.result.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.support_surfaces = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.Object()
        _v124 = val1.header
        start = end
        end += 4
        (_v124.seq,) = _struct_I.unpack(str[start:end])
        _v125 = _v124.stamp
        _x = _v125
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v124.frame_id = str[start:end].decode('utf-8')
        else:
          _v124.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.support_surface = str[start:end].decode('utf-8')
        else:
          val1.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.properties = []
        for i in range(0, length):
          val2 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.properties.append(val2)
        _v126 = val1.point_cluster
        _v127 = _v126.header
        start = end
        end += 4
        (_v127.seq,) = _struct_I.unpack(str[start:end])
        _v128 = _v127.stamp
        _x = _v128
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v127.frame_id = str[start:end].decode('utf-8')
        else:
          _v127.frame_id = str[start:end]
        _x = _v126
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v126.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v126.fields.append(val3)
        _x = _v126
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v126.is_bigendian = bool(_v126.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v126.data = str[start:end]
        start = end
        end += 1
        (_v126.is_dense,) = _struct_B.unpack(str[start:end])
        _v126.is_dense = bool(_v126.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v129 = val2.position
          _x = _v129
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v130 = val2.orientation
          _x = _v130
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _struct_3I.unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v131 = val2.position
          _x = _v131
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v132 = val2.orientation
          _x = _v132
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        _v133 = val1.surface
        start = end
        end += 32
        _v133.coef = _struct_4d.unpack(str[start:end])
        self.action_result.result.support_surfaces.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.object.object.header.seq, _x.action_feedback.feedback.object.object.header.stamp.secs, _x.action_feedback.feedback.object.object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.name = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.support_surface = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.support_surface = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.properties = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.ObjectProperty()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.action_feedback.feedback.object.object.properties.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.object.object.point_cluster.header.seq, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.secs, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.point_cluster.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.point_cluster.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.object.object.point_cluster.height, _x.action_feedback.feedback.object.object.point_cluster.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.action_feedback.feedback.object.object.point_cluster.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_feedback.feedback.object.object.point_cluster.is_bigendian, _x.action_feedback.feedback.object.object.point_cluster.point_step, _x.action_feedback.feedback.object.object.point_cluster.row_step,) = _struct_B2I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.is_bigendian = bool(self.action_feedback.feedback.object.object.point_cluster.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_feedback.feedback.object.object.point_cluster.data = str[start:end]
      start = end
      end += 1
      (self.action_feedback.feedback.object.object.point_cluster.is_dense,) = _struct_B.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.is_dense = bool(self.action_feedback.feedback.object.object.point_cluster.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.primitives = []
      for i in range(0, length):
        val1 = shape_msgs.msg.SolidPrimitive()
        start = end
        end += 1
        (val1.type,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.dimensions = struct.unpack(pattern, str[start:end])
        self.action_feedback.feedback.object.object.primitives.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.primitive_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v134 = val1.position
        _x = _v134
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v135 = val1.orientation
        _x = _v135
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.object.object.primitive_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.meshes = []
      for i in range(0, length):
        val1 = shape_msgs.msg.Mesh()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.triangles = []
        for i in range(0, length):
          val2 = shape_msgs.msg.MeshTriangle()
          start = end
          end += 12
          val2.vertex_indices = _struct_3I.unpack(str[start:end])
          val1.triangles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vertices = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.vertices.append(val2)
        self.action_feedback.feedback.object.object.meshes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.mesh_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v136 = val1.position
        _x = _v136
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v137 = val1.orientation
        _x = _v137
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.object.object.mesh_poses.append(val1)
      start = end
      end += 32
      self.action_feedback.feedback.object.object.surface.coef = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.grasps = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Grasp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v138 = val1.pre_grasp_posture
        _v139 = _v138.header
        start = end
        end += 4
        (_v139.seq,) = _struct_I.unpack(str[start:end])
        _v140 = _v139.stamp
        _x = _v140
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v139.frame_id = str[start:end].decode('utf-8')
        else:
          _v139.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v138.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v138.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v141 = val3.time_from_start
          _x = _v141
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v138.points.append(val3)
        _v142 = val1.grasp_posture
        _v143 = _v142.header
        start = end
        end += 4
        (_v143.seq,) = _struct_I.unpack(str[start:end])
        _v144 = _v143.stamp
        _x = _v144
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v143.frame_id = str[start:end].decode('utf-8')
        else:
          _v143.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v142.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v142.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v142.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = struct.unpack(pattern, str[start:end])
          _v145 = val3.time_from_start
          _x = _v145
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v142.points.append(val3)
        _v146 = val1.grasp_pose
        _v147 = _v146.header
        start = end
        end += 4
        (_v147.seq,) = _struct_I.unpack(str[start:end])
        _v148 = _v147.stamp
        _x = _v148
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v147.frame_id = str[start:end].decode('utf-8')
        else:
          _v147.frame_id = str[start:end]
        _v149 = _v146.pose
        _v150 = _v149.position
        _x = _v150
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v151 = _v149.orientation
        _x = _v151
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.grasp_quality,) = _struct_d.unpack(str[start:end])
        _v152 = val1.pre_grasp_approach
        _v153 = _v152.direction
        _v154 = _v153.header
        start = end
        end += 4
        (_v154.seq,) = _struct_I.unpack(str[start:end])
        _v155 = _v154.stamp
        _x = _v155
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v154.frame_id = str[start:end].decode('utf-8')
        else:
          _v154.frame_id = str[start:end]
        _v156 = _v153.vector
        _x = _v156
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v152
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v157 = val1.post_grasp_retreat
        _v158 = _v157.direction
        _v159 = _v158.header
        start = end
        end += 4
        (_v159.seq,) = _struct_I.unpack(str[start:end])
        _v160 = _v159.stamp
        _x = _v160
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v159.frame_id = str[start:end].decode('utf-8')
        else:
          _v159.frame_id = str[start:end]
        _v161 = _v158.vector
        _x = _v161
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v157
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v162 = val1.post_place_retreat
        _v163 = _v162.direction
        _v164 = _v163.header
        start = end
        end += 4
        (_v164.seq,) = _struct_I.unpack(str[start:end])
        _v165 = _v164.stamp
        _x = _v165
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v164.frame_id = str[start:end].decode('utf-8')
        else:
          _v164.frame_id = str[start:end]
        _v166 = _v163.vector
        _x = _v166
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v162
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (val1.max_contact_force,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.action_feedback.feedback.object.grasps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Bi3I.pack(_x.action_goal.goal.plan_grasps, _x.action_goal.goal.gripper, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_result.result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.objects:
        _v167 = val1.object
        _v168 = _v167.header
        buff.write(_struct_I.pack(_v168.seq))
        _v169 = _v168.stamp
        _x = _v169
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v168.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v167.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v167.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v167.properties)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.properties:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v170 = _v167.point_cluster
        _v171 = _v170.header
        buff.write(_struct_I.pack(_v171.seq))
        _v172 = _v171.stamp
        _x = _v172
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v171.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v170
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v170.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v170.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v170
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v170.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v170.is_dense))
        length = len(_v167.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v167.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.primitive_poses:
          _v173 = val3.position
          _x = _v173
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v174 = val3.orientation
          _x = _v174
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v167.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v167.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v167.mesh_poses:
          _v175 = val3.position
          _x = _v175
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v176 = val3.orientation
          _x = _v176
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v177 = _v167.surface
        buff.write(_v177.coef.tostring())
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _x = val2.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v178 = val2.pre_grasp_posture
          _v179 = _v178.header
          buff.write(_struct_I.pack(_v179.seq))
          _v180 = _v179.stamp
          _x = _v180
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v179.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v178.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v178.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v178.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v178.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v181 = val4.time_from_start
            _x = _v181
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v182 = val2.grasp_posture
          _v183 = _v182.header
          buff.write(_struct_I.pack(_v183.seq))
          _v184 = _v183.stamp
          _x = _v184
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v183.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v182.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v182.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v182.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v182.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v185 = val4.time_from_start
            _x = _v185
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v186 = val2.grasp_pose
          _v187 = _v186.header
          buff.write(_struct_I.pack(_v187.seq))
          _v188 = _v187.stamp
          _x = _v188
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v187.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v189 = _v186.pose
          _v190 = _v189.position
          _x = _v190
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v191 = _v189.orientation
          _x = _v191
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.grasp_quality))
          _v192 = val2.pre_grasp_approach
          _v193 = _v192.direction
          _v194 = _v193.header
          buff.write(_struct_I.pack(_v194.seq))
          _v195 = _v194.stamp
          _x = _v195
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v194.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v196 = _v193.vector
          _x = _v196
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v192
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v197 = val2.post_grasp_retreat
          _v198 = _v197.direction
          _v199 = _v198.header
          buff.write(_struct_I.pack(_v199.seq))
          _v200 = _v199.stamp
          _x = _v200
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v199.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v201 = _v198.vector
          _x = _v201
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v197
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v202 = val2.post_place_retreat
          _v203 = _v202.direction
          _v204 = _v203.header
          buff.write(_struct_I.pack(_v204.seq))
          _v205 = _v204.stamp
          _x = _v205
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v204.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v206 = _v203.vector
          _x = _v206
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v202
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          buff.write(_struct_f.pack(val2.max_contact_force))
          length = len(val2.allowed_touch_objects)
          buff.write(_struct_I.pack(length))
          for val3 in val2.allowed_touch_objects:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val3))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val3))
      length = len(self.action_result.result.support_surfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_result.result.support_surfaces:
        _v207 = val1.header
        buff.write(_struct_I.pack(_v207.seq))
        _v208 = _v207.stamp
        _x = _v208
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v207.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.properties)
        buff.write(_struct_I.pack(length))
        for val2 in val1.properties:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v209 = val1.point_cluster
        _v210 = _v209.header
        buff.write(_struct_I.pack(_v210.seq))
        _v211 = _v210.stamp
        _x = _v211
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v210.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v209
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v209.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v209.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v209
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v209.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v209.is_dense))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v212 = val2.position
          _x = _v212
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v213 = val2.orientation
          _x = _v213
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v214 = val2.position
          _x = _v214
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v215 = val2.orientation
          _x = _v215
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v216 = val1.surface
        buff.write(_v216.coef.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.object.object.header.seq, _x.action_feedback.feedback.object.object.header.stamp.secs, _x.action_feedback.feedback.object.object.header.stamp.nsecs))
      _x = self.action_feedback.feedback.object.object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.object.object.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.object.object.support_surface
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.action_feedback.feedback.object.object.properties)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.properties:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.action_feedback.feedback.object.object.point_cluster.header.seq, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.secs, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.nsecs))
      _x = self.action_feedback.feedback.object.object.point_cluster.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.action_feedback.feedback.object.object.point_cluster.height, _x.action_feedback.feedback.object.object.point_cluster.width))
      length = len(self.action_feedback.feedback.object.object.point_cluster.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.point_cluster.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_struct_B2I.pack(_x.action_feedback.feedback.object.object.point_cluster.is_bigendian, _x.action_feedback.feedback.object.object.point_cluster.point_step, _x.action_feedback.feedback.object.object.point_cluster.row_step))
      _x = self.action_feedback.feedback.object.object.point_cluster.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.action_feedback.feedback.object.object.point_cluster.is_dense))
      length = len(self.action_feedback.feedback.object.object.primitives)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.primitives:
        buff.write(_struct_B.pack(val1.type))
        length = len(val1.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.dimensions.tostring())
      length = len(self.action_feedback.feedback.object.object.primitive_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.primitive_poses:
        _v217 = val1.position
        _x = _v217
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v218 = val1.orientation
        _x = _v218
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.action_feedback.feedback.object.object.meshes)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.meshes:
        length = len(val1.triangles)
        buff.write(_struct_I.pack(length))
        for val2 in val1.triangles:
          buff.write(val2.vertex_indices.tostring())
        length = len(val1.vertices)
        buff.write(_struct_I.pack(length))
        for val2 in val1.vertices:
          _x = val2
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      length = len(self.action_feedback.feedback.object.object.mesh_poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.object.mesh_poses:
        _v219 = val1.position
        _x = _v219
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v220 = val1.orientation
        _x = _v220
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(self.action_feedback.feedback.object.object.surface.coef.tostring())
      length = len(self.action_feedback.feedback.object.grasps)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_feedback.feedback.object.grasps:
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v221 = val1.pre_grasp_posture
        _v222 = _v221.header
        buff.write(_struct_I.pack(_v222.seq))
        _v223 = _v222.stamp
        _x = _v223
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v222.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v221.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v221.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v221.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v221.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v224 = val3.time_from_start
          _x = _v224
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v225 = val1.grasp_posture
        _v226 = _v225.header
        buff.write(_struct_I.pack(_v226.seq))
        _v227 = _v226.stamp
        _x = _v227
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v226.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v225.joint_names)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.joint_names:
          length = len(val3)
          if python3 or type(val3) == unicode:
            val3 = val3.encode('utf-8')
            length = len(val3)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val3))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val3))
        length = len(_v225.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v225.points:
          length = len(val3.positions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.positions.tostring())
          length = len(val3.velocities)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.velocities.tostring())
          length = len(val3.accelerations)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.accelerations.tostring())
          length = len(val3.effort)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.effort.tostring())
          _v228 = val3.time_from_start
          _x = _v228
          buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
        _v229 = val1.grasp_pose
        _v230 = _v229.header
        buff.write(_struct_I.pack(_v230.seq))
        _v231 = _v230.stamp
        _x = _v231
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v230.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v232 = _v229.pose
        _v233 = _v232.position
        _x = _v233
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v234 = _v232.orientation
        _x = _v234
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.grasp_quality))
        _v235 = val1.pre_grasp_approach
        _v236 = _v235.direction
        _v237 = _v236.header
        buff.write(_struct_I.pack(_v237.seq))
        _v238 = _v237.stamp
        _x = _v238
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v237.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v239 = _v236.vector
        _x = _v239
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v235
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v240 = val1.post_grasp_retreat
        _v241 = _v240.direction
        _v242 = _v241.header
        buff.write(_struct_I.pack(_v242.seq))
        _v243 = _v242.stamp
        _x = _v243
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v242.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v244 = _v241.vector
        _x = _v244
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v240
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        _v245 = val1.post_place_retreat
        _v246 = _v245.direction
        _v247 = _v246.header
        buff.write(_struct_I.pack(_v247.seq))
        _v248 = _v247.stamp
        _x = _v248
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v247.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _v249 = _v246.vector
        _x = _v249
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _x = _v245
        buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
        buff.write(_struct_f.pack(val1.max_contact_force))
        length = len(val1.allowed_touch_objects)
        buff.write(_struct_I.pack(length))
        for val2 in val1.allowed_touch_objects:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *val2))
          else:
            buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = grasp_msgs.msg.FindGraspableObjectsActionGoal()
      if self.action_result is None:
        self.action_result = grasp_msgs.msg.FindGraspableObjectsActionResult()
      if self.action_feedback is None:
        self.action_feedback = grasp_msgs.msg.FindGraspableObjectsActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.action_goal.goal.plan_grasps, _x.action_goal.goal.gripper, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _struct_Bi3I.unpack(str[start:end])
      self.action_goal.goal.plan_grasps = bool(self.action_goal.goal.plan_grasps)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.objects = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.GraspableObject()
        _v250 = val1.object
        _v251 = _v250.header
        start = end
        end += 4
        (_v251.seq,) = _struct_I.unpack(str[start:end])
        _v252 = _v251.stamp
        _x = _v252
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v251.frame_id = str[start:end].decode('utf-8')
        else:
          _v251.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.name = str[start:end].decode('utf-8')
        else:
          _v250.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v250.support_surface = str[start:end].decode('utf-8')
        else:
          _v250.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v250.properties = []
        for i in range(0, length):
          val3 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8')
          else:
            val3.value = str[start:end]
          _v250.properties.append(val3)
        _v253 = _v250.point_cluster
        _v254 = _v253.header
        start = end
        end += 4
        (_v254.seq,) = _struct_I.unpack(str[start:end])
        _v255 = _v254.stamp
        _x = _v255
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v254.frame_id = str[start:end].decode('utf-8')
        else:
          _v254.frame_id = str[start:end]
        _x = _v253
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v253.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v253.fields.append(val4)
        _x = _v253
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v253.is_bigendian = bool(_v253.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v253.data = str[start:end]
        start = end
        end += 1
        (_v253.is_dense,) = _struct_B.unpack(str[start:end])
        _v253.is_dense = bool(_v253.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v250.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v250.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v250.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v256 = val3.position
          _x = _v256
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v257 = val3.orientation
          _x = _v257
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v250.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v250.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v250.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v250.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v258 = val3.position
          _x = _v258
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v259 = val3.orientation
          _x = _v259
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v250.mesh_poses.append(val3)
        _v260 = _v250.surface
        start = end
        end += 32
        _v260.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.Grasp()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.id = str[start:end].decode('utf-8')
          else:
            val2.id = str[start:end]
          _v261 = val2.pre_grasp_posture
          _v262 = _v261.header
          start = end
          end += 4
          (_v262.seq,) = _struct_I.unpack(str[start:end])
          _v263 = _v262.stamp
          _x = _v263
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v262.frame_id = str[start:end].decode('utf-8')
          else:
            _v262.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v261.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v261.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v261.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v264 = val4.time_from_start
            _x = _v264
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v261.points.append(val4)
          _v265 = val2.grasp_posture
          _v266 = _v265.header
          start = end
          end += 4
          (_v266.seq,) = _struct_I.unpack(str[start:end])
          _v267 = _v266.stamp
          _x = _v267
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v266.frame_id = str[start:end].decode('utf-8')
          else:
            _v266.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v265.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v265.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v265.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v268 = val4.time_from_start
            _x = _v268
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v265.points.append(val4)
          _v269 = val2.grasp_pose
          _v270 = _v269.header
          start = end
          end += 4
          (_v270.seq,) = _struct_I.unpack(str[start:end])
          _v271 = _v270.stamp
          _x = _v271
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v270.frame_id = str[start:end].decode('utf-8')
          else:
            _v270.frame_id = str[start:end]
          _v272 = _v269.pose
          _v273 = _v272.position
          _x = _v273
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v274 = _v272.orientation
          _x = _v274
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 8
          (val2.grasp_quality,) = _struct_d.unpack(str[start:end])
          _v275 = val2.pre_grasp_approach
          _v276 = _v275.direction
          _v277 = _v276.header
          start = end
          end += 4
          (_v277.seq,) = _struct_I.unpack(str[start:end])
          _v278 = _v277.stamp
          _x = _v278
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v277.frame_id = str[start:end].decode('utf-8')
          else:
            _v277.frame_id = str[start:end]
          _v279 = _v276.vector
          _x = _v279
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v275
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v280 = val2.post_grasp_retreat
          _v281 = _v280.direction
          _v282 = _v281.header
          start = end
          end += 4
          (_v282.seq,) = _struct_I.unpack(str[start:end])
          _v283 = _v282.stamp
          _x = _v283
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v282.frame_id = str[start:end].decode('utf-8')
          else:
            _v282.frame_id = str[start:end]
          _v284 = _v281.vector
          _x = _v284
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v280
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v285 = val2.post_place_retreat
          _v286 = _v285.direction
          _v287 = _v286.header
          start = end
          end += 4
          (_v287.seq,) = _struct_I.unpack(str[start:end])
          _v288 = _v287.stamp
          _x = _v288
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v287.frame_id = str[start:end].decode('utf-8')
          else:
            _v287.frame_id = str[start:end]
          _v289 = _v286.vector
          _x = _v289
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v285
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          start = end
          end += 4
          (val2.max_contact_force,) = _struct_f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.allowed_touch_objects = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.allowed_touch_objects.append(val3)
          val1.grasps.append(val2)
        self.action_result.result.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_result.result.support_surfaces = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.Object()
        _v290 = val1.header
        start = end
        end += 4
        (_v290.seq,) = _struct_I.unpack(str[start:end])
        _v291 = _v290.stamp
        _x = _v291
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v290.frame_id = str[start:end].decode('utf-8')
        else:
          _v290.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.support_surface = str[start:end].decode('utf-8')
        else:
          val1.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.properties = []
        for i in range(0, length):
          val2 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.properties.append(val2)
        _v292 = val1.point_cluster
        _v293 = _v292.header
        start = end
        end += 4
        (_v293.seq,) = _struct_I.unpack(str[start:end])
        _v294 = _v293.stamp
        _x = _v294
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v293.frame_id = str[start:end].decode('utf-8')
        else:
          _v293.frame_id = str[start:end]
        _x = _v292
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v292.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v292.fields.append(val3)
        _x = _v292
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v292.is_bigendian = bool(_v292.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v292.data = str[start:end]
        start = end
        end += 1
        (_v292.is_dense,) = _struct_B.unpack(str[start:end])
        _v292.is_dense = bool(_v292.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v295 = val2.position
          _x = _v295
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v296 = val2.orientation
          _x = _v296
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v297 = val2.position
          _x = _v297
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v298 = val2.orientation
          _x = _v298
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        _v299 = val1.surface
        start = end
        end += 32
        _v299.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        self.action_result.result.support_surfaces.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.object.object.header.seq, _x.action_feedback.feedback.object.object.header.stamp.secs, _x.action_feedback.feedback.object.object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.name = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.support_surface = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.support_surface = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.properties = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.ObjectProperty()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8')
        else:
          val1.value = str[start:end]
        self.action_feedback.feedback.object.object.properties.append(val1)
      _x = self
      start = end
      end += 12
      (_x.action_feedback.feedback.object.object.point_cluster.header.seq, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.secs, _x.action_feedback.feedback.object.object.point_cluster.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.object.object.point_cluster.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.object.object.point_cluster.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.feedback.object.object.point_cluster.height, _x.action_feedback.feedback.object.object.point_cluster.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
        self.action_feedback.feedback.object.object.point_cluster.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_feedback.feedback.object.object.point_cluster.is_bigendian, _x.action_feedback.feedback.object.object.point_cluster.point_step, _x.action_feedback.feedback.object.object.point_cluster.row_step,) = _struct_B2I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.is_bigendian = bool(self.action_feedback.feedback.object.object.point_cluster.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_feedback.feedback.object.object.point_cluster.data = str[start:end]
      start = end
      end += 1
      (self.action_feedback.feedback.object.object.point_cluster.is_dense,) = _struct_B.unpack(str[start:end])
      self.action_feedback.feedback.object.object.point_cluster.is_dense = bool(self.action_feedback.feedback.object.object.point_cluster.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.primitives = []
      for i in range(0, length):
        val1 = shape_msgs.msg.SolidPrimitive()
        start = end
        end += 1
        (val1.type,) = _struct_B.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.action_feedback.feedback.object.object.primitives.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.primitive_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v300 = val1.position
        _x = _v300
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v301 = val1.orientation
        _x = _v301
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.object.object.primitive_poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.meshes = []
      for i in range(0, length):
        val1 = shape_msgs.msg.Mesh()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.triangles = []
        for i in range(0, length):
          val2 = shape_msgs.msg.MeshTriangle()
          start = end
          end += 12
          val2.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
          val1.triangles.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.vertices = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          val1.vertices.append(val2)
        self.action_feedback.feedback.object.object.meshes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.object.mesh_poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v302 = val1.position
        _x = _v302
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v303 = val1.orientation
        _x = _v303
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.action_feedback.feedback.object.object.mesh_poses.append(val1)
      start = end
      end += 32
      self.action_feedback.feedback.object.object.surface.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_feedback.feedback.object.grasps = []
      for i in range(0, length):
        val1 = moveit_msgs.msg.Grasp()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        _v304 = val1.pre_grasp_posture
        _v305 = _v304.header
        start = end
        end += 4
        (_v305.seq,) = _struct_I.unpack(str[start:end])
        _v306 = _v305.stamp
        _x = _v306
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v305.frame_id = str[start:end].decode('utf-8')
        else:
          _v305.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v304.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v304.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v304.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v307 = val3.time_from_start
          _x = _v307
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v304.points.append(val3)
        _v308 = val1.grasp_posture
        _v309 = _v308.header
        start = end
        end += 4
        (_v309.seq,) = _struct_I.unpack(str[start:end])
        _v310 = _v309.stamp
        _x = _v310
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v309.frame_id = str[start:end].decode('utf-8')
        else:
          _v309.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v308.joint_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3 = str[start:end].decode('utf-8')
          else:
            val3 = str[start:end]
          _v308.joint_names.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v308.points = []
        for i in range(0, length):
          val3 = trajectory_msgs.msg.JointTrajectoryPoint()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v311 = val3.time_from_start
          _x = _v311
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
          _v308.points.append(val3)
        _v312 = val1.grasp_pose
        _v313 = _v312.header
        start = end
        end += 4
        (_v313.seq,) = _struct_I.unpack(str[start:end])
        _v314 = _v313.stamp
        _x = _v314
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v313.frame_id = str[start:end].decode('utf-8')
        else:
          _v313.frame_id = str[start:end]
        _v315 = _v312.pose
        _v316 = _v315.position
        _x = _v316
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v317 = _v315.orientation
        _x = _v317
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.grasp_quality,) = _struct_d.unpack(str[start:end])
        _v318 = val1.pre_grasp_approach
        _v319 = _v318.direction
        _v320 = _v319.header
        start = end
        end += 4
        (_v320.seq,) = _struct_I.unpack(str[start:end])
        _v321 = _v320.stamp
        _x = _v321
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v320.frame_id = str[start:end].decode('utf-8')
        else:
          _v320.frame_id = str[start:end]
        _v322 = _v319.vector
        _x = _v322
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v318
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v323 = val1.post_grasp_retreat
        _v324 = _v323.direction
        _v325 = _v324.header
        start = end
        end += 4
        (_v325.seq,) = _struct_I.unpack(str[start:end])
        _v326 = _v325.stamp
        _x = _v326
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v325.frame_id = str[start:end].decode('utf-8')
        else:
          _v325.frame_id = str[start:end]
        _v327 = _v324.vector
        _x = _v327
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v323
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        _v328 = val1.post_place_retreat
        _v329 = _v328.direction
        _v330 = _v329.header
        start = end
        end += 4
        (_v330.seq,) = _struct_I.unpack(str[start:end])
        _v331 = _v330.stamp
        _x = _v331
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v330.frame_id = str[start:end].decode('utf-8')
        else:
          _v330.frame_id = str[start:end]
        _v332 = _v329.vector
        _x = _v332
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _x = _v328
        start = end
        end += 8
        (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
        start = end
        end += 4
        (val1.max_contact_force,) = _struct_f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.allowed_touch_objects = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.allowed_touch_objects.append(val2)
        self.action_feedback.feedback.object.grasps.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_f = struct.Struct("<f")
_struct_2f = struct.Struct("<2f")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_B2I = struct.Struct("<B2I")
_struct_Bi3I = struct.Struct("<Bi3I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
