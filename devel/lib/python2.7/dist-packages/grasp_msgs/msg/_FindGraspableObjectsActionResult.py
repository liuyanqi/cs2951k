# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_msgs/FindGraspableObjectsActionResult.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import shape_msgs.msg
import moveit_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import genpy
import grasp_msgs.msg

class FindGraspableObjectsActionResult(genpy.Message):
  _md5sum = "815c3872a35e011e303fdc6f38a6dc62"
  _type = "grasp_msgs/FindGraspableObjectsActionResult"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FindGraspableObjectsResult result

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: grasp_msgs/FindGraspableObjectsResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Graspable objects found
GraspableObject[] objects

# Additional, non-graspable objects which may be support surfaces
Object[] support_surfaces

================================================================================
MSG: grasp_msgs/GraspableObject
###########################################################
# This message describes an object + grasp data
Object object
moveit_msgs/Grasp[] grasps

================================================================================
MSG: grasp_msgs/Object
###########################################################
# This message describes an object.

# Many of the geometric items below lack a stamp/frame_id,
# header stamp/frame_id should be used there
std_msgs/Header header

# An object might have a name
string name

# An object might have a known (named) support surface
string support_surface

# Objects might have properties, such as type/class, or color, etc.
ObjectProperty[] properties

###########################################################
# Objects have many possible descriptions
#  The following are the possible description formats

# Perception modules often represent an object as a cluster of points
#  Is considered valid if number of points > 0
sensor_msgs/PointCloud2 point_cluster

# MoveIt prefers solid primitives or meshes as a description of objects
shape_msgs/SolidPrimitive[] primitives
geometry_msgs/Pose[] primitive_poses

shape_msgs/Mesh[] meshes
geometry_msgs/Pose[] mesh_poses

# An object representing a support surface might be described by a plane
# Is considered valid if coefficients are not all 0s.
shape_msgs/Plane surface

================================================================================
MSG: grasp_msgs/ObjectProperty
###########################################################
# Other generic properties of an object
string name
string value

================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: shape_msgs/SolidPrimitive
# Define box, sphere, cylinder, cone 
# All shapes are defined to have their bounding boxes centered around 0,0,0.

uint8 BOX=1
uint8 SPHERE=2
uint8 CYLINDER=3
uint8 CONE=4

# The type of the shape
uint8 type


# The dimensions of the shape
float64[] dimensions

# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array

# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding
# sides of the box.
uint8 BOX_X=0
uint8 BOX_Y=1
uint8 BOX_Z=2


# For the SPHERE type, only one component is used, and it gives the radius of
# the sphere.
uint8 SPHERE_RADIUS=0


# For the CYLINDER and CONE types, the center line is oriented along
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component
# of dimensions gives the height of the cylinder (cone).  The
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the
# radius of the base of the cylinder (cone).  Cone and cylinder
# primitives are defined to be circular. The tip of the cone is
# pointing up, along +Z axis.

uint8 CYLINDER_HEIGHT=0
uint8 CYLINDER_RADIUS=1

uint8 CONE_HEIGHT=0
uint8 CONE_RADIUS=1

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: moveit_msgs/Grasp
# This message contains a description of a grasp that would be used
# with a particular end-effector to grasp an object, including how to
# approach it, grip it, etc.  This message does not contain any
# information about a "grasp point" (a position ON the object).
# Whatever generates this message should have already combined
# information about grasp points with information about the geometry
# of the end-effector to compute the grasp_pose in this message.

# A name for this grasp
string id

# The internal posture of the hand for the pre-grasp
# only positions are used
trajectory_msgs/JointTrajectory pre_grasp_posture

# The internal posture of the hand for the grasp
# positions and efforts are used
trajectory_msgs/JointTrajectory grasp_posture

# The position of the end-effector for the grasp.  This is the pose of
# the "parent_link" of the end-effector, not actually the pose of any
# link *in* the end-effector.  Typically this would be the pose of the
# most distal wrist link before the hand (end-effector) links began.
geometry_msgs/PoseStamped grasp_pose

# The estimated probability of success for this grasp, or some other
# measure of how "good" it is.
float64 grasp_quality

# The approach direction to take before picking an object
GripperTranslation pre_grasp_approach

# The retreat direction to take after a grasp has been completed (object is attached)
GripperTranslation post_grasp_retreat

# The retreat motion to perform when releasing the object; this information
# is not necessary for the grasp itself, but when releasing the object,
# the information will be necessary. The grasp used to perform a pickup
# is returned as part of the result, so this information is available for 
# later use.
GripperTranslation post_place_retreat

# the maximum contact force to use while grasping (<=0 to disable)
float32 max_contact_force

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping
string[] allowed_touch_objects

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: moveit_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','status','result']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalStatus','grasp_msgs/FindGraspableObjectsResult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,status,result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindGraspableObjectsActionResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = grasp_msgs.msg.FindGraspableObjectsResult()
    else:
      self.header = std_msgs.msg.Header()
      self.status = actionlib_msgs.msg.GoalStatus()
      self.result = grasp_msgs.msg.FindGraspableObjectsResult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.objects:
        _v1 = val1.object
        _v2 = _v1.header
        buff.write(_struct_I.pack(_v2.seq))
        _v3 = _v2.stamp
        _x = _v3
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v2.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v1.properties)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.properties:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v4 = _v1.point_cluster
        _v5 = _v4.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v4
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v4.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v4.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v4
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v4.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v4.is_dense))
        length = len(_v1.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
        length = len(_v1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.primitive_poses:
          _v7 = val3.position
          _x = _v7
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v8 = val3.orientation
          _x = _v8
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v1.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(_struct_3I.pack(*val4.vertex_indices))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.mesh_poses:
          _v9 = val3.position
          _x = _v9
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v10 = val3.orientation
          _x = _v10
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v11 = _v1.surface
        buff.write(_struct_4d.pack(*_v11.coef))
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _x = val2.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v12 = val2.pre_grasp_posture
          _v13 = _v12.header
          buff.write(_struct_I.pack(_v13.seq))
          _v14 = _v13.stamp
          _x = _v14
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v13.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v12.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v12.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v12.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v12.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.effort))
            _v15 = val4.time_from_start
            _x = _v15
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v16 = val2.grasp_posture
          _v17 = _v16.header
          buff.write(_struct_I.pack(_v17.seq))
          _v18 = _v17.stamp
          _x = _v18
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v17.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v16.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v16.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v16.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v16.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.positions))
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.velocities))
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.accelerations))
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(struct.pack(pattern, *val4.effort))
            _v19 = val4.time_from_start
            _x = _v19
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v20 = val2.grasp_pose
          _v21 = _v20.header
          buff.write(_struct_I.pack(_v21.seq))
          _v22 = _v21.stamp
          _x = _v22
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v21.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v23 = _v20.pose
          _v24 = _v23.position
          _x = _v24
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v25 = _v23.orientation
          _x = _v25
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.grasp_quality))
          _v26 = val2.pre_grasp_approach
          _v27 = _v26.direction
          _v28 = _v27.header
          buff.write(_struct_I.pack(_v28.seq))
          _v29 = _v28.stamp
          _x = _v29
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v28.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v30 = _v27.vector
          _x = _v30
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v26
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v31 = val2.post_grasp_retreat
          _v32 = _v31.direction
          _v33 = _v32.header
          buff.write(_struct_I.pack(_v33.seq))
          _v34 = _v33.stamp
          _x = _v34
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v33.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v35 = _v32.vector
          _x = _v35
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v31
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v36 = val2.post_place_retreat
          _v37 = _v36.direction
          _v38 = _v37.header
          buff.write(_struct_I.pack(_v38.seq))
          _v39 = _v38.stamp
          _x = _v39
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v38.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v40 = _v37.vector
          _x = _v40
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v36
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          buff.write(_struct_f.pack(val2.max_contact_force))
          length = len(val2.allowed_touch_objects)
          buff.write(_struct_I.pack(length))
          for val3 in val2.allowed_touch_objects:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val3))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val3))
      length = len(self.result.support_surfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.support_surfaces:
        _v41 = val1.header
        buff.write(_struct_I.pack(_v41.seq))
        _v42 = _v41.stamp
        _x = _v42
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v41.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.properties)
        buff.write(_struct_I.pack(length))
        for val2 in val1.properties:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v43 = val1.point_cluster
        _v44 = _v43.header
        buff.write(_struct_I.pack(_v44.seq))
        _v45 = _v44.stamp
        _x = _v45
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v44.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v43
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v43.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v43.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v43
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v43.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v43.is_dense))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v46 = val2.position
          _x = _v46
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v47 = val2.orientation
          _x = _v47
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(_struct_3I.pack(*val3.vertex_indices))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v48 = val2.position
          _x = _v48
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v49 = val2.orientation
          _x = _v49
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v50 = val1.surface
        buff.write(_struct_4d.pack(*_v50.coef))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = grasp_msgs.msg.FindGraspableObjectsResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8')
      else:
        self.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.objects = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.GraspableObject()
        _v51 = val1.object
        _v52 = _v51.header
        start = end
        end += 4
        (_v52.seq,) = _struct_I.unpack(str[start:end])
        _v53 = _v52.stamp
        _x = _v53
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v52.frame_id = str[start:end].decode('utf-8')
        else:
          _v52.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.name = str[start:end].decode('utf-8')
        else:
          _v51.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.support_surface = str[start:end].decode('utf-8')
        else:
          _v51.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.properties = []
        for i in range(0, length):
          val3 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8')
          else:
            val3.value = str[start:end]
          _v51.properties.append(val3)
        _v54 = _v51.point_cluster
        _v55 = _v54.header
        start = end
        end += 4
        (_v55.seq,) = _struct_I.unpack(str[start:end])
        _v56 = _v55.stamp
        _x = _v56
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.frame_id = str[start:end].decode('utf-8')
        else:
          _v55.frame_id = str[start:end]
        _x = _v54
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v54.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v54.fields.append(val4)
        _x = _v54
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v54.is_bigendian = bool(_v54.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v54.data = str[start:end]
        start = end
        end += 1
        (_v54.is_dense,) = _struct_B.unpack(str[start:end])
        _v54.is_dense = bool(_v54.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          _v51.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v57 = val3.position
          _x = _v57
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v58 = val3.orientation
          _x = _v58
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v51.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = _struct_3I.unpack(str[start:end])
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v51.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v59 = val3.position
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v60 = val3.orientation
          _x = _v60
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v51.mesh_poses.append(val3)
        _v61 = _v51.surface
        start = end
        end += 32
        _v61.coef = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.Grasp()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.id = str[start:end].decode('utf-8')
          else:
            val2.id = str[start:end]
          _v62 = val2.pre_grasp_posture
          _v63 = _v62.header
          start = end
          end += 4
          (_v63.seq,) = _struct_I.unpack(str[start:end])
          _v64 = _v63.stamp
          _x = _v64
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v63.frame_id = str[start:end].decode('utf-8')
          else:
            _v63.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v62.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v62.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v62.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = struct.unpack(pattern, str[start:end])
            _v65 = val4.time_from_start
            _x = _v65
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v62.points.append(val4)
          _v66 = val2.grasp_posture
          _v67 = _v66.header
          start = end
          end += 4
          (_v67.seq,) = _struct_I.unpack(str[start:end])
          _v68 = _v67.stamp
          _x = _v68
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v67.frame_id = str[start:end].decode('utf-8')
          else:
            _v67.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v66.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v66.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v66.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = struct.unpack(pattern, str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = struct.unpack(pattern, str[start:end])
            _v69 = val4.time_from_start
            _x = _v69
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v66.points.append(val4)
          _v70 = val2.grasp_pose
          _v71 = _v70.header
          start = end
          end += 4
          (_v71.seq,) = _struct_I.unpack(str[start:end])
          _v72 = _v71.stamp
          _x = _v72
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v71.frame_id = str[start:end].decode('utf-8')
          else:
            _v71.frame_id = str[start:end]
          _v73 = _v70.pose
          _v74 = _v73.position
          _x = _v74
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v75 = _v73.orientation
          _x = _v75
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 8
          (val2.grasp_quality,) = _struct_d.unpack(str[start:end])
          _v76 = val2.pre_grasp_approach
          _v77 = _v76.direction
          _v78 = _v77.header
          start = end
          end += 4
          (_v78.seq,) = _struct_I.unpack(str[start:end])
          _v79 = _v78.stamp
          _x = _v79
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v78.frame_id = str[start:end].decode('utf-8')
          else:
            _v78.frame_id = str[start:end]
          _v80 = _v77.vector
          _x = _v80
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v76
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v81 = val2.post_grasp_retreat
          _v82 = _v81.direction
          _v83 = _v82.header
          start = end
          end += 4
          (_v83.seq,) = _struct_I.unpack(str[start:end])
          _v84 = _v83.stamp
          _x = _v84
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v83.frame_id = str[start:end].decode('utf-8')
          else:
            _v83.frame_id = str[start:end]
          _v85 = _v82.vector
          _x = _v85
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v81
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v86 = val2.post_place_retreat
          _v87 = _v86.direction
          _v88 = _v87.header
          start = end
          end += 4
          (_v88.seq,) = _struct_I.unpack(str[start:end])
          _v89 = _v88.stamp
          _x = _v89
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v88.frame_id = str[start:end].decode('utf-8')
          else:
            _v88.frame_id = str[start:end]
          _v90 = _v87.vector
          _x = _v90
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v86
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          start = end
          end += 4
          (val2.max_contact_force,) = _struct_f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.allowed_touch_objects = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.allowed_touch_objects.append(val3)
          val1.grasps.append(val2)
        self.result.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.support_surfaces = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.Object()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _struct_I.unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8')
        else:
          _v91.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.support_surface = str[start:end].decode('utf-8')
        else:
          val1.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.properties = []
        for i in range(0, length):
          val2 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.properties.append(val2)
        _v93 = val1.point_cluster
        _v94 = _v93.header
        start = end
        end += 4
        (_v94.seq,) = _struct_I.unpack(str[start:end])
        _v95 = _v94.stamp
        _x = _v95
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v94.frame_id = str[start:end].decode('utf-8')
        else:
          _v94.frame_id = str[start:end]
        _x = _v93
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v93.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v93.fields.append(val3)
        _x = _v93
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v93.is_bigendian = bool(_v93.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v93.data = str[start:end]
        start = end
        end += 1
        (_v93.is_dense,) = _struct_B.unpack(str[start:end])
        _v93.is_dense = bool(_v93.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v96 = val2.position
          _x = _v96
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v97 = val2.orientation
          _x = _v97
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = _struct_3I.unpack(str[start:end])
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v98 = val2.position
          _x = _v98
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v99 = val2.orientation
          _x = _v99
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        _v100 = val1.surface
        start = end
        end += 32
        _v100.coef = _struct_4d.unpack(str[start:end])
        self.result.support_surfaces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.result.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.objects:
        _v101 = val1.object
        _v102 = _v101.header
        buff.write(_struct_I.pack(_v102.seq))
        _v103 = _v102.stamp
        _x = _v103
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v102.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v101.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v101.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(_v101.properties)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.properties:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v104 = _v101.point_cluster
        _v105 = _v104.header
        buff.write(_struct_I.pack(_v105.seq))
        _v106 = _v105.stamp
        _x = _v106
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v105.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v104
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v104.fields)
        buff.write(_struct_I.pack(length))
        for val4 in _v104.fields:
          _x = val4.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v104
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v104.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v104.is_dense))
        length = len(_v101.primitives)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.primitives:
          buff.write(_struct_B.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
        length = len(_v101.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.primitive_poses:
          _v107 = val3.position
          _x = _v107
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v108 = val3.orientation
          _x = _v108
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(_v101.meshes)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.meshes:
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          for val4 in val3.triangles:
            buff.write(val4.vertex_indices.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v101.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v101.mesh_poses:
          _v109 = val3.position
          _x = _v109
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v110 = val3.orientation
          _x = _v110
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v111 = _v101.surface
        buff.write(_v111.coef.tostring())
        length = len(val1.grasps)
        buff.write(_struct_I.pack(length))
        for val2 in val1.grasps:
          _x = val2.id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v112 = val2.pre_grasp_posture
          _v113 = _v112.header
          buff.write(_struct_I.pack(_v113.seq))
          _v114 = _v113.stamp
          _x = _v114
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v113.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v112.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v112.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v112.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v112.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v115 = val4.time_from_start
            _x = _v115
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v116 = val2.grasp_posture
          _v117 = _v116.header
          buff.write(_struct_I.pack(_v117.seq))
          _v118 = _v117.stamp
          _x = _v118
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v117.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v116.joint_names)
          buff.write(_struct_I.pack(length))
          for val4 in _v116.joint_names:
            length = len(val4)
            if python3 or type(val4) == unicode:
              val4 = val4.encode('utf-8')
              length = len(val4)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val4))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val4))
          length = len(_v116.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v116.points:
            length = len(val4.positions)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.positions.tostring())
            length = len(val4.velocities)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.velocities.tostring())
            length = len(val4.accelerations)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.accelerations.tostring())
            length = len(val4.effort)
            buff.write(_struct_I.pack(length))
            pattern = '<%sd'%length
            buff.write(val4.effort.tostring())
            _v119 = val4.time_from_start
            _x = _v119
            buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
          _v120 = val2.grasp_pose
          _v121 = _v120.header
          buff.write(_struct_I.pack(_v121.seq))
          _v122 = _v121.stamp
          _x = _v122
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v121.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v123 = _v120.pose
          _v124 = _v123.position
          _x = _v124
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v125 = _v123.orientation
          _x = _v125
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
          buff.write(_struct_d.pack(val2.grasp_quality))
          _v126 = val2.pre_grasp_approach
          _v127 = _v126.direction
          _v128 = _v127.header
          buff.write(_struct_I.pack(_v128.seq))
          _v129 = _v128.stamp
          _x = _v129
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v128.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v130 = _v127.vector
          _x = _v130
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v126
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v131 = val2.post_grasp_retreat
          _v132 = _v131.direction
          _v133 = _v132.header
          buff.write(_struct_I.pack(_v133.seq))
          _v134 = _v133.stamp
          _x = _v134
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v133.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v135 = _v132.vector
          _x = _v135
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v131
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          _v136 = val2.post_place_retreat
          _v137 = _v136.direction
          _v138 = _v137.header
          buff.write(_struct_I.pack(_v138.seq))
          _v139 = _v138.stamp
          _x = _v139
          buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
          _x = _v138.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _v140 = _v137.vector
          _x = _v140
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _x = _v136
          buff.write(_struct_2f.pack(_x.desired_distance, _x.min_distance))
          buff.write(_struct_f.pack(val2.max_contact_force))
          length = len(val2.allowed_touch_objects)
          buff.write(_struct_I.pack(length))
          for val3 in val2.allowed_touch_objects:
            length = len(val3)
            if python3 or type(val3) == unicode:
              val3 = val3.encode('utf-8')
              length = len(val3)
            if python3:
              buff.write(struct.pack('<I%sB'%length, length, *val3))
            else:
              buff.write(struct.pack('<I%ss'%length, length, val3))
      length = len(self.result.support_surfaces)
      buff.write(_struct_I.pack(length))
      for val1 in self.result.support_surfaces:
        _v141 = val1.header
        buff.write(_struct_I.pack(_v141.seq))
        _v142 = _v141.stamp
        _x = _v142
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v141.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.support_surface
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.properties)
        buff.write(_struct_I.pack(length))
        for val2 in val1.properties:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
        _v143 = val1.point_cluster
        _v144 = _v143.header
        buff.write(_struct_I.pack(_v144.seq))
        _v145 = _v144.stamp
        _x = _v145
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v144.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v143
        buff.write(_struct_2I.pack(_x.height, _x.width))
        length = len(_v143.fields)
        buff.write(_struct_I.pack(length))
        for val3 in _v143.fields:
          _x = val3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          if python3:
            buff.write(struct.pack('<I%sB'%length, length, *_x))
          else:
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_struct_IBI.pack(_x.offset, _x.datatype, _x.count))
        _x = _v143
        buff.write(_struct_B2I.pack(_x.is_bigendian, _x.point_step, _x.row_step))
        _x = _v143.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_B.pack(_v143.is_dense))
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          buff.write(_struct_B.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
        length = len(val1.primitive_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitive_poses:
          _v146 = val2.position
          _x = _v146
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v147 = val2.orientation
          _x = _v147
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.meshes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.meshes:
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          for val3 in val2.triangles:
            buff.write(val3.vertex_indices.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.mesh_poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.mesh_poses:
          _v148 = val2.position
          _x = _v148
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v149 = val2.orientation
          _x = _v149
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _v150 = val1.surface
        buff.write(_v150.coef.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.result is None:
        self.result = grasp_msgs.msg.FindGraspableObjectsResult()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.status.text = str[start:end].decode('utf-8')
      else:
        self.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.objects = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.GraspableObject()
        _v151 = val1.object
        _v152 = _v151.header
        start = end
        end += 4
        (_v152.seq,) = _struct_I.unpack(str[start:end])
        _v153 = _v152.stamp
        _x = _v153
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v152.frame_id = str[start:end].decode('utf-8')
        else:
          _v152.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.name = str[start:end].decode('utf-8')
        else:
          _v151.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.support_surface = str[start:end].decode('utf-8')
        else:
          _v151.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.properties = []
        for i in range(0, length):
          val3 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.value = str[start:end].decode('utf-8')
          else:
            val3.value = str[start:end]
          _v151.properties.append(val3)
        _v154 = _v151.point_cluster
        _v155 = _v154.header
        start = end
        end += 4
        (_v155.seq,) = _struct_I.unpack(str[start:end])
        _v156 = _v155.stamp
        _x = _v156
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v155.frame_id = str[start:end].decode('utf-8')
        else:
          _v155.frame_id = str[start:end]
        _x = _v154
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v154.fields = []
        for i in range(0, length):
          val4 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val4.name = str[start:end].decode('utf-8')
          else:
            val4.name = str[start:end]
          _x = val4
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v154.fields.append(val4)
        _x = _v154
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v154.is_bigendian = bool(_v154.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v154.data = str[start:end]
        start = end
        end += 1
        (_v154.is_dense,) = _struct_B.unpack(str[start:end])
        _v154.is_dense = bool(_v154.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.primitives = []
        for i in range(0, length):
          val3 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val3.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          _v151.primitives.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.primitive_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v157 = val3.position
          _x = _v157
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v158 = val3.orientation
          _x = _v158
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v151.primitive_poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.meshes = []
        for i in range(0, length):
          val3 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.triangles = []
          for i in range(0, length):
            val4 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val4.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val3.triangles.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v151.meshes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v151.mesh_poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v159 = val3.position
          _x = _v159
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v160 = val3.orientation
          _x = _v160
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v151.mesh_poses.append(val3)
        _v161 = _v151.surface
        start = end
        end += 32
        _v161.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.grasps = []
        for i in range(0, length):
          val2 = moveit_msgs.msg.Grasp()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.id = str[start:end].decode('utf-8')
          else:
            val2.id = str[start:end]
          _v162 = val2.pre_grasp_posture
          _v163 = _v162.header
          start = end
          end += 4
          (_v163.seq,) = _struct_I.unpack(str[start:end])
          _v164 = _v163.stamp
          _x = _v164
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v163.frame_id = str[start:end].decode('utf-8')
          else:
            _v163.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v162.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v162.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v162.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v165 = val4.time_from_start
            _x = _v165
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v162.points.append(val4)
          _v166 = val2.grasp_posture
          _v167 = _v166.header
          start = end
          end += 4
          (_v167.seq,) = _struct_I.unpack(str[start:end])
          _v168 = _v167.stamp
          _x = _v168
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v167.frame_id = str[start:end].decode('utf-8')
          else:
            _v167.frame_id = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v166.joint_names = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val4 = str[start:end].decode('utf-8')
            else:
              val4 = str[start:end]
            _v166.joint_names.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v166.points = []
          for i in range(0, length):
            val4 = trajectory_msgs.msg.JointTrajectoryPoint()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            pattern = '<%sd'%length
            start = end
            end += struct.calcsize(pattern)
            val4.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
            _v169 = val4.time_from_start
            _x = _v169
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
            _v166.points.append(val4)
          _v170 = val2.grasp_pose
          _v171 = _v170.header
          start = end
          end += 4
          (_v171.seq,) = _struct_I.unpack(str[start:end])
          _v172 = _v171.stamp
          _x = _v172
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v171.frame_id = str[start:end].decode('utf-8')
          else:
            _v171.frame_id = str[start:end]
          _v173 = _v170.pose
          _v174 = _v173.position
          _x = _v174
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v175 = _v173.orientation
          _x = _v175
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          start = end
          end += 8
          (val2.grasp_quality,) = _struct_d.unpack(str[start:end])
          _v176 = val2.pre_grasp_approach
          _v177 = _v176.direction
          _v178 = _v177.header
          start = end
          end += 4
          (_v178.seq,) = _struct_I.unpack(str[start:end])
          _v179 = _v178.stamp
          _x = _v179
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v178.frame_id = str[start:end].decode('utf-8')
          else:
            _v178.frame_id = str[start:end]
          _v180 = _v177.vector
          _x = _v180
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v176
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v181 = val2.post_grasp_retreat
          _v182 = _v181.direction
          _v183 = _v182.header
          start = end
          end += 4
          (_v183.seq,) = _struct_I.unpack(str[start:end])
          _v184 = _v183.stamp
          _x = _v184
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v183.frame_id = str[start:end].decode('utf-8')
          else:
            _v183.frame_id = str[start:end]
          _v185 = _v182.vector
          _x = _v185
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v181
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          _v186 = val2.post_place_retreat
          _v187 = _v186.direction
          _v188 = _v187.header
          start = end
          end += 4
          (_v188.seq,) = _struct_I.unpack(str[start:end])
          _v189 = _v188.stamp
          _x = _v189
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v188.frame_id = str[start:end].decode('utf-8')
          else:
            _v188.frame_id = str[start:end]
          _v190 = _v187.vector
          _x = _v190
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _x = _v186
          start = end
          end += 8
          (_x.desired_distance, _x.min_distance,) = _struct_2f.unpack(str[start:end])
          start = end
          end += 4
          (val2.max_contact_force,) = _struct_f.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.allowed_touch_objects = []
          for i in range(0, length):
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3 = str[start:end].decode('utf-8')
            else:
              val3 = str[start:end]
            val2.allowed_touch_objects.append(val3)
          val1.grasps.append(val2)
        self.result.objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.result.support_surfaces = []
      for i in range(0, length):
        val1 = grasp_msgs.msg.Object()
        _v191 = val1.header
        start = end
        end += 4
        (_v191.seq,) = _struct_I.unpack(str[start:end])
        _v192 = _v191.stamp
        _x = _v192
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v191.frame_id = str[start:end].decode('utf-8')
        else:
          _v191.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.support_surface = str[start:end].decode('utf-8')
        else:
          val1.support_surface = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.properties = []
        for i in range(0, length):
          val2 = grasp_msgs.msg.ObjectProperty()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8')
          else:
            val2.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.properties.append(val2)
        _v193 = val1.point_cluster
        _v194 = _v193.header
        start = end
        end += 4
        (_v194.seq,) = _struct_I.unpack(str[start:end])
        _v195 = _v194.stamp
        _x = _v195
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v194.frame_id = str[start:end].decode('utf-8')
        else:
          _v194.frame_id = str[start:end]
        _x = _v193
        start = end
        end += 8
        (_x.height, _x.width,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v193.fields = []
        for i in range(0, length):
          val3 = sensor_msgs.msg.PointField()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.name = str[start:end].decode('utf-8')
          else:
            val3.name = str[start:end]
          _x = val3
          start = end
          end += 9
          (_x.offset, _x.datatype, _x.count,) = _struct_IBI.unpack(str[start:end])
          _v193.fields.append(val3)
        _x = _v193
        start = end
        end += 9
        (_x.is_bigendian, _x.point_step, _x.row_step,) = _struct_B2I.unpack(str[start:end])
        _v193.is_bigendian = bool(_v193.is_bigendian)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        _v193.data = str[start:end]
        start = end
        end += 1
        (_v193.is_dense,) = _struct_B.unpack(str[start:end])
        _v193.is_dense = bool(_v193.is_dense)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = shape_msgs.msg.SolidPrimitive()
          start = end
          end += 1
          (val2.type,) = _struct_B.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          val1.primitives.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitive_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v196 = val2.position
          _x = _v196
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v197 = val2.orientation
          _x = _v197
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.primitive_poses.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.meshes = []
        for i in range(0, length):
          val2 = shape_msgs.msg.Mesh()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.triangles = []
          for i in range(0, length):
            val3 = shape_msgs.msg.MeshTriangle()
            start = end
            end += 12
            val3.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
            val2.triangles.append(val3)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.meshes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.mesh_poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v198 = val2.position
          _x = _v198
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v199 = val2.orientation
          _x = _v199
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.mesh_poses.append(val2)
        _v200 = val1.surface
        start = end
        end += 32
        _v200.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
        self.result.support_surfaces.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_IBI = struct.Struct("<IBI")
_struct_B = struct.Struct("<B")
_struct_d = struct.Struct("<d")
_struct_f = struct.Struct("<f")
_struct_2f = struct.Struct("<2f")
_struct_2i = struct.Struct("<2i")
_struct_3I = struct.Struct("<3I")
_struct_B2I = struct.Struct("<B2I")
_struct_4d = struct.Struct("<4d")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
