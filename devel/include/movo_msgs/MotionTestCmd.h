// Generated by gencpp from file movo_msgs/MotionTestCmd.msg
// DO NOT EDIT!


#ifndef MOVO_MSGS_MESSAGE_MOTIONTESTCMD_H
#define MOVO_MSGS_MESSAGE_MOTIONTESTCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace movo_msgs
{
template <class ContainerAllocator>
struct MotionTestCmd_
{
  typedef MotionTestCmd_<ContainerAllocator> Type;

  MotionTestCmd_()
    : test_type(0)
    , duration_sec(0)
    , magnitude(0.0)  {
    }
  MotionTestCmd_(const ContainerAllocator& _alloc)
    : test_type(0)
    , duration_sec(0)
    , magnitude(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _test_type_type;
  _test_type_type test_type;

   typedef uint32_t _duration_sec_type;
  _duration_sec_type duration_sec;

   typedef float _magnitude_type;
  _magnitude_type magnitude;




  typedef boost::shared_ptr< ::movo_msgs::MotionTestCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movo_msgs::MotionTestCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MotionTestCmd_

typedef ::movo_msgs::MotionTestCmd_<std::allocator<void> > MotionTestCmd;

typedef boost::shared_ptr< ::movo_msgs::MotionTestCmd > MotionTestCmdPtr;
typedef boost::shared_ptr< ::movo_msgs::MotionTestCmd const> MotionTestCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movo_msgs::MotionTestCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'movo_msgs': ['/home/andrewandjasmine/movo_ws/src/movo_kinova/movo_common/movo_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movo_msgs::MotionTestCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movo_msgs::MotionTestCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movo_msgs::MotionTestCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f60142650ddadc978bbd697beb24a04f";
  }

  static const char* value(const ::movo_msgs::MotionTestCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf60142650ddadc97ULL;
  static const uint64_t static_value2 = 0x8bbd697beb24a04fULL;
};

template<class ContainerAllocator>
struct DataType< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movo_msgs/MotionTestCmd";
  }

  static const char* value(const ::movo_msgs::MotionTestCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 test_type\n\
uint32 duration_sec\n\
float32 magnitude\n\
";
  }

  static const char* value(const ::movo_msgs::MotionTestCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test_type);
      stream.next(m.duration_sec);
      stream.next(m.magnitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionTestCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movo_msgs::MotionTestCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movo_msgs::MotionTestCmd_<ContainerAllocator>& v)
  {
    s << indent << "test_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.test_type);
    s << indent << "duration_sec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration_sec);
    s << indent << "magnitude: ";
    Printer<float>::stream(s, indent + "  ", v.magnitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVO_MSGS_MESSAGE_MOTIONTESTCMD_H
