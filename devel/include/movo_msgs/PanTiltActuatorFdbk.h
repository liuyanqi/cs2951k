// Generated by gencpp from file movo_msgs/PanTiltActuatorFdbk.msg
// DO NOT EDIT!


#ifndef MOVO_MSGS_MESSAGE_PANTILTACTUATORFDBK_H
#define MOVO_MSGS_MESSAGE_PANTILTACTUATORFDBK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace movo_msgs
{
template <class ContainerAllocator>
struct PanTiltActuatorFdbk_
{
  typedef PanTiltActuatorFdbk_<ContainerAllocator> Type;

  PanTiltActuatorFdbk_()
    : header()
    , current(0.0)
    , pos_rad(0.0)
    , vel_rps(0.0)
    , torque_nm(0.0)
    , pwm(0.0)
    , encoder_rad(0.0)
    , accel()
    , temperature_degC(0.0)  {
    }
  PanTiltActuatorFdbk_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , current(0.0)
    , pos_rad(0.0)
    , vel_rps(0.0)
    , torque_nm(0.0)
    , pwm(0.0)
    , encoder_rad(0.0)
    , accel(_alloc)
    , temperature_degC(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _current_type;
  _current_type current;

   typedef float _pos_rad_type;
  _pos_rad_type pos_rad;

   typedef float _vel_rps_type;
  _vel_rps_type vel_rps;

   typedef float _torque_nm_type;
  _torque_nm_type torque_nm;

   typedef float _pwm_type;
  _pwm_type pwm;

   typedef float _encoder_rad_type;
  _encoder_rad_type encoder_rad;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef float _temperature_degC_type;
  _temperature_degC_type temperature_degC;




  typedef boost::shared_ptr< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> const> ConstPtr;

}; // struct PanTiltActuatorFdbk_

typedef ::movo_msgs::PanTiltActuatorFdbk_<std::allocator<void> > PanTiltActuatorFdbk;

typedef boost::shared_ptr< ::movo_msgs::PanTiltActuatorFdbk > PanTiltActuatorFdbkPtr;
typedef boost::shared_ptr< ::movo_msgs::PanTiltActuatorFdbk const> PanTiltActuatorFdbkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace movo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'movo_msgs': ['/home/andrewandjasmine/movo_ws/src/movo_kinova/movo_common/movo_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff9a650d0514b0eeb8ec92950681d6cb";
  }

  static const char* value(const ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff9a650d0514b0eeULL;
  static const uint64_t static_value2 = 0xb8ec92950681d6cbULL;
};

template<class ContainerAllocator>
struct DataType< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "movo_msgs/PanTiltActuatorFdbk";
  }

  static const char* value(const ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 current\n\
float32 pos_rad\n\
float32 vel_rps\n\
float32 torque_nm\n\
float32 pwm\n\
float32 encoder_rad\n\
geometry_msgs/Vector3 accel\n\
float32 temperature_degC\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.current);
      stream.next(m.pos_rad);
      stream.next(m.vel_rps);
      stream.next(m.torque_nm);
      stream.next(m.pwm);
      stream.next(m.encoder_rad);
      stream.next(m.accel);
      stream.next(m.temperature_degC);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PanTiltActuatorFdbk_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::movo_msgs::PanTiltActuatorFdbk_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "pos_rad: ";
    Printer<float>::stream(s, indent + "  ", v.pos_rad);
    s << indent << "vel_rps: ";
    Printer<float>::stream(s, indent + "  ", v.vel_rps);
    s << indent << "torque_nm: ";
    Printer<float>::stream(s, indent + "  ", v.torque_nm);
    s << indent << "pwm: ";
    Printer<float>::stream(s, indent + "  ", v.pwm);
    s << indent << "encoder_rad: ";
    Printer<float>::stream(s, indent + "  ", v.encoder_rad);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "temperature_degC: ";
    Printer<float>::stream(s, indent + "  ", v.temperature_degC);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVO_MSGS_MESSAGE_PANTILTACTUATORFDBK_H
